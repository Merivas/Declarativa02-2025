% ---------------------------------------------
% SISTEMA DE GESTI√ìN DE EMPLEADOS (DIN√ÅMICO)
% ---------------------------------------------

% 1Ô∏è‚É£ Declaraci√≥n din√°mica
:- dynamic empleado/3.

% Base inicial de conocimiento
empleado('Ana', contabilidad, 900).
empleado('Luis', sistemas, 1200).
empleado('Sof√≠a', marketing, 1100).

% ---------------------------------------------
% 2Ô∏è‚É£ Mostrar todos los empleados
listar_empleados :-
    writeln('--- LISTA DE EMPLEADOS ---'),
    (   empleado(Nombre, Depto, Salario),
        format('Nombre: ~w | Depto: ~w | Salario: $~w~n', [Nombre, Depto, Salario]),
        fail
    ;   writeln('----------------------------')
    ).

% ---------------------------------------------
% 3Ô∏è‚É£ Agregar nuevo empleado
% Evita duplicados verificando si ya existe
agregar_empleado(Nombre, Depto, Salario) :-
    (   empleado(Nombre, _, _)
    ->  format('‚ùå El empleado ~w ya existe en la base.~n', [Nombre])
    ;   assertz(empleado(Nombre, Depto, Salario)),
        format('‚úÖ Se agreg√≥ a ~w en el departamento ~w con salario $~w.~n',
               [Nombre, Depto, Salario])
    ).

% ---------------------------------------------
% 4Ô∏è‚É£ Eliminar empleado por nombre
eliminar_empleado(Nombre) :-
    (   retract(empleado(Nombre, Depto, Salario))
    ->  format('üóëÔ∏è  Se elimin√≥ a ~w del departamento ~w (salario $~w).~n',
               [Nombre, Depto, Salario])
    ;   format('‚ö†Ô∏è  No se encontr√≥ al empleado ~w.~n', [Nombre])
    ).

% Eliminar todos
eliminar_todos :-
    retractall(empleado(_, _, _)),
    writeln('üí£ Todos los registros han sido eliminados de la base.').

% ---------------------------------------------
% 5Ô∏è‚É£ Actualizar salario o departamento
actualizar_empleado(Nombre, NuevoDepto, NuevoSalario) :-
    (   retract(empleado(Nombre, _, _))
    ->  assertz(empleado(Nombre, NuevoDepto, NuevoSalario)),
        format('üîÅ Datos actualizados: ~w ‚Üí Depto: ~w | Salario: $~w~n',
               [Nombre, NuevoDepto, NuevoSalario])
    ;   format('‚ö†Ô∏è  No se encontr√≥ a ~w para actualizar.~n', [Nombre])
    ).

% ---------------------------------------------
% 6Ô∏è‚É£ Ejemplo de incorporaci√≥n condicionada
% Solo agrega si el salario es mayor a 0
agregar_condicional(Nombre, Depto, Salario) :-
    (   Salario =< 0
    ->  format('üö´ No se puede agregar a ~w con salario inv√°lido: $~w~n', [Nombre, Salario])
    ;   agregar_empleado(Nombre, Depto, Salario)
    ).

% ---------------------------------------------
% 7Ô∏è‚É£ Men√∫ interactivo
menu :-
    writeln(' '),
    writeln('========= MEN√ö ========='),
    writeln('1. Listar empleados'),
    writeln('2. Agregar empleado'),
    writeln('3. Eliminar empleado'),
    writeln('4. Actualizar empleado'),
    writeln('5. Agregar con validaci√≥n'),
    writeln('6. Eliminar todos'),
    writeln('0. Salir'),
    writeln('========================'),
    write('Seleccione una opci√≥n: '),
    read(Opcion),
    ejecutar(Opcion).

% ---------------------------------------------
% 8Ô∏è‚É£ Ejecutor del men√∫
ejecutar(1) :- listar_empleados, menu.
ejecutar(2) :-
    write('Nombre: '), read(N),
    write('Departamento: '), read(D),
    write('Salario: '), read(S),
    agregar_empleado(N, D, S),
    menu.
ejecutar(3) :-
    write('Nombre a eliminar: '), read(N),
    eliminar_empleado(N),
    menu.
ejecutar(4) :-
    write('Nombre: '), read(N),
    write('Nuevo departamento: '), read(D),
    write('Nuevo salario: '), read(S),
    actualizar_empleado(N, D, S),
    menu.
ejecutar(5) :-
    write('Nombre: '), read(N),
    write('Departamento: '), read(D),
    write('Salario: '), read(S),
    agregar_condicional(N, D, S),
    menu.
ejecutar(6) :- eliminar_todos, menu.
ejecutar(0) :- writeln('üëã Fin del programa.').
ejecutar(_) :- writeln('‚ùó Opci√≥n no v√°lida.'), menu.

% ---------------------------------------------
% 9Ô∏è‚É£ Punto de entrada
main :-
    writeln('üìò SISTEMA DE EMPLEADOS INICIADO'),
    menu.
